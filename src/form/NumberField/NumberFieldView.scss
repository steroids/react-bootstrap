@use "../../scss/variables" as vars;

:root {
    --number-field-arrow-color: #414141;
}

html[data-theme="dark"] {
    --number-field-arrow-color: #ffffff;
}

$number-field-arrow-color: var(--number-field-arrow-color);

.NumberFieldView {
    $root: &;
    display: flex;
    position: relative;
    padding: 0;

    font-family: vars.$font-family-nunito;

    // Hide default arrows
    /* Chrome, Safari, Edge, Opera */
    input::-webkit-outer-spin-button,
    input::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    /* Firefox */
    input[type="number"] {
        -moz-appearance: textfield;
    }

    &__arrows-container {
        position: absolute;
        z-index: 2;
        right: 0;
        top: 0;
        height: 100%;

        display: flex;
        flex-direction: column;
        justify-content: space-between;
        align-items: center;

        transition: opacity 150ms ease-in-out;
        opacity: 0;
        pointer-events: none;
    }

    &__arrow {
        width: 30px;
        height: 16px;

        display: flex;
        justify-content: center;
        align-items: center;
        outline: none;
        border: none;
        background: transparent;

        span > svg > path {
            stroke: $number-field-arrow-color;
        }

        &_disabled {
            span {
                cursor: not-allowed;
            }
            span > svg > path {
                stroke: vars.$element-background-color-disabled;
            }
        }

        &:last-child {
            transform: rotate(180deg);
        }
    }

    &_size {
        &_lg {
            #{$root} {
                &__input {
                    height: 56px;
                    border-radius: vars.$radius-large;
                    font-size: vars.$font-size-lg;

                    &-effects {
                        border-radius: vars.$radius-large;
                    }
                }

                &__arrow {
                    transform: translateX(-3px) translateY(6px);

                    &:last-child {
                        transform: translateX(-3px) translateY(-8px) rotate(180deg);
                    }
                }
            }
        }

        &_md {
            #{$root} {
                &__input {
                    height: 46px;
                    border-radius: vars.$radius-large;
                    font-size: vars.$font-size-base;

                    &-effects {
                        border-radius: vars.$radius-large;
                    }
                }

                &__arrow {
                    transform: translateX(-3px) translateY(4px) scale(0.8);

                    &:last-child {
                        transform: translateX(-3px) translateY(-4px) rotate(180deg) scale(0.8);
                    }
                }
            }
        }

        &_sm {
            #{$root} {
                &__input {
                    height: 34px;
                    font-size: vars.$font-size-sm;

                    &-effects {
                        border-radius: vars.$radius-small;
                    }
                }

                &__arrow {
                    transform: translateX(1px) translateY(2px) scale(0.8);

                    &:last-child {
                        transform: translateX(1px) translateY(-3px) rotate(180deg) scale(0.8);
                    }
                }
            }
        }
    }

    &__input {
        width: 100%;
        outline: none;
        border: 1px solid vars.$element-border-color;
        border-radius: vars.$radius-small;
        padding: 5px 22px 5px 8px;
        line-height: 24px;
        z-index: 1;
        font-weight: vars.$font-weight-sm;
        color: vars.$text-color;

        background-color: vars.$element-field-background-color;

        &::placeholder {
            color: vars.$element-placeholder-color;
        }

        &:disabled {
            background-color: vars.$element-background-color-disabled;
            color: vars.$element-placeholder-color-disabled;
        }

        &:hover:not(:disabled):not(:focus) {
            border-color: vars.$element-border-color-hover;
        }

        &:active:not(:disabled) {
            border: 1px solid vars.$primary;
        }
    }

    &:focus-within #{$root}__arrows-container {
        opacity: 1;
        pointer-events: all;
    }

    &__input-effects {
        position: absolute;
        display: block;
        z-index: 5;
        top: 0;
        left: 0;

        width: 100%;
        height: 100%;
        background-color: transparent;
        border: 4px solid vars.$primary-light;
        opacity: 0;
        pointer-events: none;
    }

    &__input:focus ~ &__input-effects {
        opacity: 1;
    }

    &__input:active ~ &__input-effects {
        opacity: 0;
    }

    &_filled #{$root}__arrows-container {
        opacity: 1;
        pointer-events: all;
    }
}
