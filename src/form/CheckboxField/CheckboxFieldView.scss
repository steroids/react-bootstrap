@use "../../scss/variables";

:root {
    --disabled-text-color: rgba(0, 0, 0, 0.3);
}

html[data-theme="dark"] {
    --disabled-text-color: rgba(255, 255, 255, 0.3);
}

$disabled-text-color: var(--disabled-text-color);

.CheckboxFieldView {
    $root: &;
    position: relative;
    display: inline-flex;

    font-family: variables.$font-family-nunito;

    &__input + &__label {
        display: inline-flex;
        align-items: center;
        user-select: none;
    }

    &__label {
        position: relative;
        cursor: pointer;

        //Сам кастомный checkbox
        &::before {
            content: "";
            display: inline-block;
            width: 24px;
            height: 24px;
            flex-shrink: 0;
            flex-grow: 0;

            border: 1px solid variables.$gray;
            border-radius: variables.$radius-small;

            background-repeat: no-repeat;
            background-position: center center;
            background-size: 50% 50%;
        }

        //Псевдоэлемент который служит для применения эффектов на чекбокс
        &::after {
            content: "";
            display: inline-block;
            position: absolute;
            top: 0;
            left: 0;
            width: 26px;
            height: 26px;

            transform: translate(-12%, -11.5%);
            transition: opacity 150ms ease-in-out;
            opacity: 0;

            border-radius: variables.$radius-large;
            border: 4px solid variables.$primary-light;
        }

        &-text {
            margin-left: 8px;
            color: variables.$text-color;
            font-size: variables.$font-size-sm;
            font-weight: variables.$font-weight-md;
            transform: translateY(1px);
        }
    }

    &__input {
        position: absolute;
        z-index: -1;
        opacity: 0;

        //HOVER
        &:not(:focus):not(:disabled):not(:checked):not(:active) + #{$root}__label:hover::before {
            border-color: #d0d0d0;
        }

        //ACTIVE
        &:not(:disabled):not(:checked):active + #{$root}__label::before {
            border-color: variables.$primary;
        }

        &:active:checked + #{$root}__label::after {
            opacity: 0;
        }

        &:checked:active + #{$root}__label::before {
            background-color: variables.$primary-light;
            border-color: transparent;
        }

        //FOCUS
        &:focus + #{$root}__label::after {
            opacity: 1;
        }

        //CHECKED
        &:checked + #{$root}__label::before {
            border-color: variables.$primary;
            background-color: variables.$primary;
            background-image: url("data:image/svg+xml,%3Csvg width='11' height='8' viewBox='0 0 11 8' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M9.20898 1L3.70898 7L1.20898 4.27273' stroke='white' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'/%3E%3C/svg%3E%0A");
        }

        //DISABLED
        &:disabled + #{$root}__label {
            cursor: not-allowed;
            span {
                color: $disabled-text-color;
            }

            &::before {
                background: variables.$element-background-color-disabled;
                border: none;
            }
        }

        &:disabled:checked #{$root}__label::before {
            background-color: variables.$element-background-color-disabled;
            border-color: none;
            background-image: url("data:image/svg+xml,%3Csvg width='11' height='9' viewBox='0 0 11 9' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M9.8584 1.48401L4.3584 7.48401L1.8584 4.75674' stroke='black' stroke-opacity='0.1' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'/%3E%3C/svg%3E%0A");
        }
    }

    &_size {
        &_lg {
            #{$root}__label {
                &::before {
                    width: 24px;
                    height: 24px;
                    border-radius: variables.$radius-small;
                }
                &::after {
                    width: 26px;
                    height: 26px;
                    border-radius: variables.$radius-large;
                }

                &-text {
                    margin-left: 12px;
                    font-size: variables.$font-size-lg;
                    line-height: 24px;
                }
            }
        }

        &_md {
            #{$root}__label {
                &::before {
                    width: 20px;
                    height: 20px;
                    border-radius: 6px;
                }

                &::after {
                    width: 22px;
                    height: 22px;
                    border-radius: variables.$radius-medium;
                    transform: translate(-13.5%, -13.5%);
                }

                &-text {
                    margin-left: 8px;
                    font-size: variables.$font-size-base;
                    line-height: 22px;
                }
            }
        }

        &_sm {
            #{$root}__label {
                &::before {
                    width: 16px;
                    height: 16px;
                    border-radius: 6px;
                }

                &::after {
                    width: 18px;
                    height: 18px;
                    border-radius: variables.$radius-medium;
                    transform: translate(-15.5%, -15.5%);
                }

                &-text {
                    margin-left: 8px;
                    font-size: variables.$font-size-sm;
                    line-height: 18px;
                }
            }
        }
    }
}
.has-errors label {
    &::before {
        border-color: variables.$danger;
    }

    span {
        color: variables.$danger;
    }
}
